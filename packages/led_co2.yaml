interval:
  - interval: 30s #1min
    # Set full LED strip to color based on CO2 values
    then:
      - logger.log:
          format: "Updating CO2 LED, CO2 Test: %.1f and CO2: %.1f"
          args: [ 'id(led_co2_test).stat', 'id(co2).state' ]
      - if:
          condition:
            and: 
              - light.is_on: led_strip
              - lambda: 'return id(led_co2_test).state > 0;'
          then:
            - if:
                condition:
                  lambda: 'return id(co2).state < 1340;'
                then:
                  - light.addressable_set:
                      id: led_strip
                      color_brightness: !lambda 'return id(led_brightness).state / 100.0;'
                      range_from: 0
                      range_to: !lambda 'return min(11.0f, ceil( ((id(co2).state-100)/60) - 19) );'
                      red: 0%
                      green: 100%
                      blue: 0%
                      
            - if:
                condition:
                  lambda: 'return id(co2).state >= 700 && id(co2).state < 2240;'
                then:
                  - light.addressable_set:
                      id: led_strip
                      color_brightness: !lambda 'return id(led_brightness).state / 100.0;'
                      range_from: !lambda 'return max( floor( ((id(co2).state-100)/60) - 21) * -1, 0.0f);'
                      range_to: !lambda 'return max(ceil( ((id(co2).state-100)/60) - 36), 0.0f);'
                      red: 100%
                      green: 100%
                      blue: 0%
                      
            - if:
                condition:
                  lambda: 'return id(co2).state >= 1640;'
                then:
                  - light.addressable_set:
                      id: led_strip
                      color_brightness: !lambda 'return id(led_brightness).state / 100.0;'
                      range_from: !lambda 'return max( floor( ((id(co2).state-100)/60) - 36) * -1, 0.0f);'
                      range_to: 11
                      red: 100%
                      green: 00%
                      blue: 0%

# Identical logic but testing CO2 quantity using the Co2 test slider
          else:
            - if:
                condition:
                  lambda: 'return id(led_co2_test).state < 1340;'
                then:
                  - light.addressable_set:
                      id: led_strip
                      color_brightness: !lambda 'return id(led_brightness).state / 100.0;'
                      range_from: 0
                      range_to: !lambda 'return min(11.0f, ceil( ((id(led_co2_test).state-100)/60) - 19) );'
                      red: 0%
                      green: 100%
                      blue: 0%
                      
            - if:
                condition:
                  lambda: 'return id(led_co2_test).state >= 700 && id(led_co2_test).state < 2240;'
                then:
                  - light.addressable_set:
                      id: led_strip
                      color_brightness: !lambda 'return id(led_brightness).state / 100.0;'
                      range_from: !lambda 'return max( floor( ((id(led_co2_test).state-100)/60) - 21) * -1, 0.0f);'
                      range_to: !lambda 'return max(ceil( ((id(led_co2_test).state-100)/60) - 36), 0.0f);'
                      red: 100%
                      green: 100%
                      blue: 0%
                      
            - if:
                condition:
                  lambda: 'return id(led_co2_test).state >= 1640;'
                then:
                  - light.addressable_set:
                      id: led_strip
                      color_brightness: !lambda 'return id(led_brightness).state / 100.0;'
                      range_from: !lambda 'return max( floor( ((id(led_co2_test).state-100)/60) - 36) * -1, 0.0f);'
                      range_to: 11
                      red: 100%
                      green: 00%
                      blue: 0%
